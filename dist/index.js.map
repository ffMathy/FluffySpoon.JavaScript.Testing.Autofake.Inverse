{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,mDAAwE;AAGxE,sEAAiG;AAEjG;IAAmE,yDAA8B;IAC7F,+CAAoB,UAAqB;QAAzC,YACI,iBAAO,SACV;QAFmB,gBAAU,GAAV,UAAU,CAAW;;IAEzC,CAAC;IAED,kFAAkC,GAAlC,UAAmC,IAAmB,EAAE,QAAmB;QACvE,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;IACpF,CAAC;IAED,mFAAmC,GAAnC,UAA6D,IAAO;QAChE,IAAM,IAAI,GAAG,iDAAqC,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACnC,CAAC;IACL,4CAAC;AAAD,CAAC,AAbD,CAAmE,yCAA8B,GAahG","sourcesContent":["import { InversionOfControlRegistration } from '@fluffy-spoon/autofake';\r\nimport Container from '@fluffy-spoon/inverse';\r\n\r\nimport { getOrCreateArgumentsMetadataForTarget } from '@fluffy-spoon/inverse/dist/src/Utilities';\r\n\r\nexport default class InverseInversionOfControlRegistration extends InversionOfControlRegistration {\r\n    constructor(private _container: Container) {\r\n        super();\r\n    }\r\n\r\n    registerTypeAsInstanceFromAccessor(type: new () => any, accessor: () => any): void {\r\n        this._container.whenResolvingType(type).useFactory(accessor).asSingleInstance();\r\n    }\r\n    \r\n    getConstructorArgumentTypesForClass<T extends new () => any>(type: T): (new () => any)[] {\r\n        const args = getOrCreateArgumentsMetadataForTarget(type);\r\n        return args.toParameterArray();\r\n    }\r\n}"]}